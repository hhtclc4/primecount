package com.example.bigtable.sample;

import java.io.IOException;
import java.util.Collections;
import java.util.StringTokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;
import org.apache.hadoop.hbase.mapreduce.TableReducer;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

/**
 * Writes the same results of WordCount to a new table
 */
public class WordCountHBase {

	final static Log LOG = LogFactory.getLog(WordCountHBase.class);

	public static final byte[] COLUMN_FAMILY = "cf".getBytes();
	public static final byte[] COUNT_COLUMN_NAME = "count".getBytes();

	public class EvenOddSumMapper extends
	Mapper <LongWritable, Text, Text, IntWritable> {

	private Text even = new Text("prime");
	private Text odd = new Text("odd");

public static int primecheck(int n)
{
	int dem=0;
	for(int i = 1; i <= n; i++)
	{
		if(n % i == 0)
			dem++;
	}
	if(dem == 2)
		return 1;
	else
		return 0;
}

 @Override
 protected void map(LongWritable key, Text value, Context context) throws IOException,
 InterruptedException {
  int number = Integer.parseInt(value.toString());
  IntWritable n = new IntWritable(number);
  if (primecheck(number) == 1) {
   context.write(prime, 1);
  }
}
public class EvenOddSumReducer extends
       Reducer<Text, IntWritable, Text, IntWritable> {

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context)
       throws IOException, InterruptedException {
        int sum = 0;
        for (IntWritable val : values) {
            sum += val.get();
        }
        context.write(key, new IntWritable(“Number of prime is: -” + sum));
    }
}
public class EvenOddSumDriver extends Configured implements Tool {

	@Override
	public int run(String[] args) throws Exception {
	Configuration conf = getConf();

	Job job = new Job(conf);
	job.setJarByClass(EvenOddSumDriver.class);

	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(IntWritable.class);

	job.setMapperClass(EvenOddSumMapper.class);
	job.setCombinerClass(EvenOddSumReducer.class);
	job.setReducerClass(EvenOddSumReducer.class);

	job.setInputFormatClass(TextInputFormat.class);
	job.setOutputFormatClass(TextOutputFormat.class);

	FileInputFormat.setInputPaths(job, new Path(args[0]));
	FileOutputFormat.setOutputPath(job, new Path(args[1]));

	return (job.waitForCompletion(true) ? 0 : 1);
	}

	public static void main(String[] args) throws Exception {
	int res = ToolRunner.run(new EvenOddSumDriver(), args);
	System.exit(res);
	}
  }
}
